name: CI

on:
  push:
    # Publish `main` as container `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  CONTAINER_IMAGE_NAME: ${{ github.repository }}
  CONTAINER_IMAGE_REGISTRY: ghcr.io

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Publish image
  publish:
    # Ensure test job passes before pushing image.
    needs: test

    name: Publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      
      - name: Prepare
        id: prep
        run: |
          CONTAINER_IMAGE=$CONTAINER_IMAGE_NAME
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${CONTAINER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${CONTAINER_IMAGE}:${MINOR},${CONTAINER_IMAGE}:${MAJOR},${CONTAINER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${CONTAINER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build container image
        run: |
            buildah bud --label org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }} --label org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }} --label org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }} --label org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }} --label org.opencontainers.image.version=${{ steps.prep.outputs.version }} --label org.opencontainers.image.created=${{ steps.prep.outputs.created }} --label org.opencontainers.image.revision=${{ github.sha }} --label org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }} --tag $CONTAINER_IMAGE_NAME .

      - name: Log into github registry
        run: echo ${{ secrets.CR_PAT }} | buildah login -u ${{ github.actor }} --password-stdin $CONTAINER_IMAGE_REGISTRY

      - name: Push image to github registry
        run: |
          IMAGE_ID=$CONTAINER_IMAGE_REGISTRY/${{ github.repository }}

          buildah tag $CONTAINER_IMAGE_NAME $IMAGE_ID:${{ steps.prep.outputs.version }}
          buildah push $IMAGE_ID:${{ steps.prep.outputs.version }}
